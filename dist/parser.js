module.exports = (function() {
  /*
   * Generated by PEG.js 0.8.0.
   *
   * http://pegjs.majda.cz/
   */

  function peg$subclass(child, parent) {
    function ctor() { this.constructor = child; }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
  }

  function SyntaxError(message, expected, found, offset, line, column) {
    this.message  = message;
    this.expected = expected;
    this.found    = found;
    this.offset   = offset;
    this.line     = line;
    this.column   = column;

    this.name     = "SyntaxError";
  }

  peg$subclass(SyntaxError, Error);

  function parse(input) {
    var options = arguments.length > 1 ? arguments[1] : {},

        peg$FAILED = {},

        peg$startRuleFunctions = { start: peg$parsestart },
        peg$startRuleFunction  = peg$parsestart,

        peg$c0 = function(n) {
            return [['TORNADO_BODY'].concat([{name: null, type: 'bodies', body: n}])];
          },
        peg$c1 = [],
        peg$c2 = peg$FAILED,
        peg$c3 = function(e, contents) {
            return ['HTML_ELEMENT',{
              tag_info: e,
              tag_contents: contents
            }];
          },
        peg$c4 = function(e) {
            return ['HTML_ELEMENT', {
              tag_info: e
            }]
          },
        peg$c5 = function(k, a) {
            return {key: k, attributes: a};
          },
        peg$c6 = "/",
        peg$c7 = { type: "literal", value: "/", description: "\"/\"" },
        peg$c8 = /^[a-zA-Z0-9\-]/,
        peg$c9 = { type: "class", value: "[a-zA-Z0-9\\-]", description: "[a-zA-Z0-9\\-]" },
        peg$c10 = function(k) {
            return k.join('');
          },
        peg$c11 = function(name, val) {
            return ['HTML_ATTRIBUTE', {
              attrName: name,
              value: val
            }];
           },
        peg$c12 = function(name, val) {
            return ['HTML_ATTRIBUTE', {
              attrName: name,
              value: val
            }];
          },
        peg$c13 = function(name) {
            return ['HTML_ATTRIBUTE', {
              attrName: name
            }];
          },
        peg$c14 = function(a) {return a;},
        peg$c15 = function(a) {
            return a;
          },
        peg$c16 = void 0,
        peg$c17 = /^[^\/]/,
        peg$c18 = { type: "class", value: "[^\\/]", description: "[^\\/]" },
        peg$c19 = function(char) {return char;},
        peg$c20 = function(name) {
            return name.join('');
          },
        peg$c21 = "<!--",
        peg$c22 = { type: "literal", value: "<!--", description: "\"<!--\"" },
        peg$c23 = "-->",
        peg$c24 = { type: "literal", value: "-->", description: "\"-->\"" },
        peg$c25 = { type: "any", description: "any character" },
        peg$c26 = function(c) {return c;},
        peg$c27 = function(comment) {
            return ['HTML_COMMENT', comment.join('')]
          },
        peg$c28 = "!",
        peg$c29 = { type: "literal", value: "!", description: "\"!\"" },
        peg$c30 = "!}",
        peg$c31 = { type: "literal", value: "!}", description: "\"!}\"" },
        peg$c32 = function(comment) {
            return ['TORNADO_COMMENT', comment.join('')]
          },
        peg$c33 = function(start, contents, bodies, end) {
            if(!end || start.key !== end.key) {
              error('Expected end tag for "' + start.key + '" ' + start.type + ' body, start tag was "' + start.key + '" and end tag was "' + end.key + '"');
            }
            return true;
          },
        peg$c34 = function(start, contents, bodies, end) {
            // combine the default body into bodies
            start.bodies = bodies;
            start.body = contents;
            start.key = start.key.split('.');
            return ['TORNADO_BODY', start];
          },
        peg$c35 = function(start) {
            start.bodies = [];
            start.key = start.key.split('.');
            return ['TORNADO_BODY', start];
          },
        peg$c36 = ":",
        peg$c37 = { type: "literal", value: ":", description: "\":\"" },
        peg$c38 = function(type, contents) {return ['TORNADO_BODY', {name: type, type: 'bodies', body: contents}];},
        peg$c39 = function(b) {
            return b;
          },
        peg$c40 = /^[#?\^<+@%]/,
        peg$c41 = { type: "class", value: "[#?\\^<+@%]", description: "[#?\\^<+@%]" },
        peg$c42 = function(type, id, p) {
            return {
              type: tornadoBodyTypes[type],
              key: id,
              params: p
            };
          },
        peg$c43 = function(id) {
            return {key: id};
          },
        peg$c44 = function(r, p) {
            var key = r.split('.');
            if (r === '.') {
              key = [];
            }
            return ['TORNADO_REFERENCE', {key: key, params: p}]
          },
        peg$c45 = function(key, params) {
            return ['TORNADO_PARTIAL', {
              key: key,
              params: params
            }];
          },
        peg$c46 = /^[a-zA-Z_$.,|]/,
        peg$c47 = { type: "class", value: "[a-zA-Z_$.,|]", description: "[a-zA-Z_$.,|]" },
        peg$c48 = /^[a-zA-Z0-9_$-.,|]/,
        peg$c49 = { type: "class", value: "[a-zA-Z0-9_$-.,|]", description: "[a-zA-Z0-9_$-.,|]" },
        peg$c50 = function(first, after) {
            return first + after.join('');
          },
        peg$c51 = ".",
        peg$c52 = { type: "literal", value: ".", description: "\".\"" },
        peg$c53 = function(k) {return k},
        peg$c54 = function(d) { return d; },
        peg$c55 = "|",
        peg$c56 = { type: "literal", value: "|", description: "\"|\"" },
        peg$c57 = function(type) {return {type: type};},
        peg$c58 = function(p) {return p;},
        peg$c59 = function(p) {
            return p;
          },
        peg$c60 = function(key, val) {
            return ['TORNADO_PARAM', {
              key: key,
              val: val
            }]
          },
        peg$c61 = function(key, val) {
            var path = val.split('.');
            if (val === '.') {
              path = [];
            }
            return ['TORNADO_PARAM', {
              key: key,
              val: ['TORNADO_REFERENCE', {key: path}]
            }]
          },
        peg$c62 = /^[#?\^><+%:@\/~%]/,
        peg$c63 = { type: "class", value: "[#?\\^><+%:@\\/~%]", description: "[#?\\^><+%:@\\/~%]" },
        peg$c64 = function(n) {
            return n.join('');
          },
        peg$c65 = { type: "other", description: "number" },
        peg$c66 = function(n) { return n; },
        peg$c67 = { type: "other", description: "float" },
        peg$c68 = function(l, r) { return parseFloat(l + "." + r.join('')); },
        peg$c69 = { type: "other", description: "integer" },
        peg$c70 = null,
        peg$c71 = /^[\-]/,
        peg$c72 = { type: "class", value: "[\\-]", description: "[\\-]" },
        peg$c73 = /^[0-9]/,
        peg$c74 = { type: "class", value: "[0-9]", description: "[0-9]" },
        peg$c75 = function(sign, digits) {
            sign = sign ? sign : '';
            return parseInt(sign + digits.join(""), 10);
        },
        peg$c76 = function(b) {
            return ['PLAIN_TEXT', b.join('').replace(/\n/g, '\\n')];
          },
        peg$c77 = function(entity) {
            return ['HTML_ENTITY', entity.join('')];
          },
        peg$c78 = /^[#a-zA-Z0-9]/,
        peg$c79 = { type: "class", value: "[#a-zA-Z0-9]", description: "[#a-zA-Z0-9]" },
        peg$c80 = function(char) {
            return char.join('');
          },
        peg$c81 = function(b) {
            return ['PLAIN_TEXT', b.join('')];
          },
        peg$c82 = /^[^`]/,
        peg$c83 = { type: "class", value: "[^`]", description: "[^`]" },
        peg$c84 = function(val) {
            return ['PLAIN_TEXT', val.join('')];
          },
        peg$c85 = /^[\t\x0B\f\n \xA0\uFEFF]/,
        peg$c86 = { type: "class", value: "[\\t\\x0B\\f\\n \\xA0\\uFEFF]", description: "[\\t\\x0B\\f\\n \\xA0\\uFEFF]" },
        peg$c87 = "</",
        peg$c88 = { type: "literal", value: "</", description: "\"</\"" },
        peg$c89 = "<",
        peg$c90 = { type: "literal", value: "<", description: "\"<\"" },
        peg$c91 = ">",
        peg$c92 = { type: "literal", value: ">", description: "\">\"" },
        peg$c93 = "/>",
        peg$c94 = { type: "literal", value: "/>", description: "\"/>\"" },
        peg$c95 = "{/",
        peg$c96 = { type: "literal", value: "{/", description: "\"{/\"" },
        peg$c97 = "/}",
        peg$c98 = { type: "literal", value: "/}", description: "\"/}\"" },
        peg$c99 = "{",
        peg$c100 = { type: "literal", value: "{", description: "\"{\"" },
        peg$c101 = "}",
        peg$c102 = { type: "literal", value: "}", description: "\"}\"" },
        peg$c103 = "=",
        peg$c104 = { type: "literal", value: "=", description: "\"=\"" },
        peg$c105 = "\"",
        peg$c106 = { type: "literal", value: "\"", description: "\"\\\"\"" },
        peg$c107 = "'",
        peg$c108 = { type: "literal", value: "'", description: "\"'\"" },
        peg$c109 = "&",
        peg$c110 = { type: "literal", value: "&", description: "\"&\"" },
        peg$c111 = ";",
        peg$c112 = { type: "literal", value: ";", description: "\";\"" },
        peg$c113 = /^[^"]/,
        peg$c114 = { type: "class", value: "[^\"]", description: "[^\"]" },
        peg$c115 = "\n",
        peg$c116 = { type: "literal", value: "\n", description: "\"\\n\"" },
        peg$c117 = "\r\n",
        peg$c118 = { type: "literal", value: "\r\n", description: "\"\\r\\n\"" },
        peg$c119 = "\r",
        peg$c120 = { type: "literal", value: "\r", description: "\"\\r\"" },
        peg$c121 = "\u2028",
        peg$c122 = { type: "literal", value: "\u2028", description: "\"\\u2028\"" },
        peg$c123 = "\u2029",
        peg$c124 = { type: "literal", value: "\u2029", description: "\"\\u2029\"" },

        peg$currPos          = 0,
        peg$reportedPos      = 0,
        peg$cachedPos        = 0,
        peg$cachedPosDetails = { line: 1, column: 1, seenCR: false },
        peg$maxFailPos       = 0,
        peg$maxFailExpected  = [],
        peg$silentFails      = 0,

        peg$result;

    if ("startRule" in options) {
      if (!(options.startRule in peg$startRuleFunctions)) {
        throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
      }

      peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
    }

    function text() {
      return input.substring(peg$reportedPos, peg$currPos);
    }

    function offset() {
      return peg$reportedPos;
    }

    function line() {
      return peg$computePosDetails(peg$reportedPos).line;
    }

    function column() {
      return peg$computePosDetails(peg$reportedPos).column;
    }

    function expected(description) {
      throw peg$buildException(
        null,
        [{ type: "other", description: description }],
        peg$reportedPos
      );
    }

    function error(message) {
      throw peg$buildException(message, null, peg$reportedPos);
    }

    function peg$computePosDetails(pos) {
      function advance(details, startPos, endPos) {
        var p, ch;

        for (p = startPos; p < endPos; p++) {
          ch = input.charAt(p);
          if (ch === "\n") {
            if (!details.seenCR) { details.line++; }
            details.column = 1;
            details.seenCR = false;
          } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
            details.line++;
            details.column = 1;
            details.seenCR = true;
          } else {
            details.column++;
            details.seenCR = false;
          }
        }
      }

      if (peg$cachedPos !== pos) {
        if (peg$cachedPos > pos) {
          peg$cachedPos = 0;
          peg$cachedPosDetails = { line: 1, column: 1, seenCR: false };
        }
        advance(peg$cachedPosDetails, peg$cachedPos, pos);
        peg$cachedPos = pos;
      }

      return peg$cachedPosDetails;
    }

    function peg$fail(expected) {
      if (peg$currPos < peg$maxFailPos) { return; }

      if (peg$currPos > peg$maxFailPos) {
        peg$maxFailPos = peg$currPos;
        peg$maxFailExpected = [];
      }

      peg$maxFailExpected.push(expected);
    }

    function peg$buildException(message, expected, pos) {
      function cleanupExpected(expected) {
        var i = 1;

        expected.sort(function(a, b) {
          if (a.description < b.description) {
            return -1;
          } else if (a.description > b.description) {
            return 1;
          } else {
            return 0;
          }
        });

        while (i < expected.length) {
          if (expected[i - 1] === expected[i]) {
            expected.splice(i, 1);
          } else {
            i++;
          }
        }
      }

      function buildMessage(expected, found) {
        function stringEscape(s) {
          function hex(ch) { return ch.charCodeAt(0).toString(16).toUpperCase(); }

          return s
            .replace(/\\/g,   '\\\\')
            .replace(/"/g,    '\\"')
            .replace(/\x08/g, '\\b')
            .replace(/\t/g,   '\\t')
            .replace(/\n/g,   '\\n')
            .replace(/\f/g,   '\\f')
            .replace(/\r/g,   '\\r')
            .replace(/[\x00-\x07\x0B\x0E\x0F]/g, function(ch) { return '\\x0' + hex(ch); })
            .replace(/[\x10-\x1F\x80-\xFF]/g,    function(ch) { return '\\x'  + hex(ch); })
            .replace(/[\u0180-\u0FFF]/g,         function(ch) { return '\\u0' + hex(ch); })
            .replace(/[\u1080-\uFFFF]/g,         function(ch) { return '\\u'  + hex(ch); });
        }

        var expectedDescs = new Array(expected.length),
            expectedDesc, foundDesc, i;

        for (i = 0; i < expected.length; i++) {
          expectedDescs[i] = expected[i].description;
        }

        expectedDesc = expected.length > 1
          ? expectedDescs.slice(0, -1).join(", ")
              + " or "
              + expectedDescs[expected.length - 1]
          : expectedDescs[0];

        foundDesc = found ? "\"" + stringEscape(found) + "\"" : "end of input";

        return "Expected " + expectedDesc + " but " + foundDesc + " found.";
      }

      var posDetails = peg$computePosDetails(pos),
          found      = pos < input.length ? input.charAt(pos) : null;

      if (expected !== null) {
        cleanupExpected(expected);
      }

      return new SyntaxError(
        message !== null ? message : buildMessage(expected, found),
        expected,
        found,
        pos,
        posDetails.line,
        posDetails.column
      );
    }

    function peg$parsestart() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parsenodes();
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c0(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsenodes() {
      var s0, s1;

      s0 = [];
      s1 = peg$parsepart();
      if (s1 === peg$FAILED) {
        s1 = peg$parseplain_text();
      }
      while (s1 !== peg$FAILED) {
        s0.push(s1);
        s1 = peg$parsepart();
        if (s1 === peg$FAILED) {
          s1 = peg$parseplain_text();
        }
      }

      return s0;
    }

    function peg$parsepart() {
      var s0;

      s0 = peg$parseelement();
      if (s0 === peg$FAILED) {
        s0 = peg$parsecomment();
        if (s0 === peg$FAILED) {
          s0 = peg$parsehtml_entity();
          if (s0 === peg$FAILED) {
            s0 = peg$parsetornado_comment();
            if (s0 === peg$FAILED) {
              s0 = peg$parsetornado_body();
              if (s0 === peg$FAILED) {
                s0 = peg$parsetornado_partial();
                if (s0 === peg$FAILED) {
                  s0 = peg$parsetornado_reference();
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parseattr_part() {
      var s0;

      s0 = peg$parsetornado_comment();
      if (s0 === peg$FAILED) {
        s0 = peg$parsetornado_body();
        if (s0 === peg$FAILED) {
          s0 = peg$parsetornado_reference();
          if (s0 === peg$FAILED) {
            s0 = peg$parsetornado_partial();
            if (s0 === peg$FAILED) {
              s0 = peg$parsehtml_entity();
              if (s0 === peg$FAILED) {
                s0 = peg$parseattr_text();
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parsesingle_quote_attr_part() {
      var s0;

      s0 = peg$parsetornado_comment();
      if (s0 === peg$FAILED) {
        s0 = peg$parsetornado_body();
        if (s0 === peg$FAILED) {
          s0 = peg$parsetornado_reference();
          if (s0 === peg$FAILED) {
            s0 = peg$parsetornado_partial();
            if (s0 === peg$FAILED) {
              s0 = peg$parsehtml_entity();
              if (s0 === peg$FAILED) {
                s0 = peg$parsesingle_quote_attr_text();
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parseelement() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsestart_tag();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsenodes();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseend_tag();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c3(s1, s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c2;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c2;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c2;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseself_closing_tag();
        if (s1 === peg$FAILED) {
          s1 = peg$parsestart_tag();
        }
        if (s1 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c4(s1);
        }
        s0 = s1;
      }

      return s0;
    }

    function peg$parsestart_tag() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parselangle();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsekey();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseattributes();
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$parsews();
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parsews();
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parserangle();
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c5(s2, s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c2;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c2;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c2;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c2;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c2;
      }

      return s0;
    }

    function peg$parseself_closing_tag() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$parselangle();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsekey();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseattributes();
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$parsews();
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parsews();
            }
            if (s4 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 47) {
                s5 = peg$c6;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c7); }
              }
              if (s5 !== peg$FAILED) {
                s6 = peg$parserangle();
                if (s6 !== peg$FAILED) {
                  peg$reportedPos = s0;
                  s1 = peg$c5(s2, s3);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c2;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c2;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c2;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c2;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c2;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c2;
      }

      return s0;
    }

    function peg$parseend_tag() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parselangleslash();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsekey();
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$parsews();
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$parsews();
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parserangle();
            if (s4 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c2;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c2;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c2;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c2;
      }

      return s0;
    }

    function peg$parsekey() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = [];
      if (peg$c8.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c9); }
      }
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          if (peg$c8.test(input.charAt(peg$currPos))) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c9); }
          }
        }
      } else {
        s1 = peg$c2;
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c10(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseattribute() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parseattribute_name();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parsews();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsews();
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseequals();
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$parsews();
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parsews();
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parsequote();
              if (s5 !== peg$FAILED) {
                s6 = [];
                s7 = peg$parseattr_part();
                while (s7 !== peg$FAILED) {
                  s6.push(s7);
                  s7 = peg$parseattr_part();
                }
                if (s6 !== peg$FAILED) {
                  s7 = peg$parsequote();
                  if (s7 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c11(s1, s6);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c2;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c2;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c2;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c2;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c2;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c2;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c2;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseattribute_name();
        if (s1 !== peg$FAILED) {
          s2 = [];
          s3 = peg$parsews();
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parsews();
          }
          if (s2 !== peg$FAILED) {
            s3 = peg$parseequals();
            if (s3 !== peg$FAILED) {
              s4 = [];
              s5 = peg$parsews();
              while (s5 !== peg$FAILED) {
                s4.push(s5);
                s5 = peg$parsews();
              }
              if (s4 !== peg$FAILED) {
                s5 = peg$parsesingle_quote();
                if (s5 !== peg$FAILED) {
                  s6 = [];
                  s7 = peg$parsesingle_quote_attr_part();
                  while (s7 !== peg$FAILED) {
                    s6.push(s7);
                    s7 = peg$parsesingle_quote_attr_part();
                  }
                  if (s6 !== peg$FAILED) {
                    s7 = peg$parsesingle_quote();
                    if (s7 !== peg$FAILED) {
                      peg$reportedPos = s0;
                      s1 = peg$c12(s1, s6);
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c2;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c2;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c2;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c2;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c2;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c2;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c2;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseattribute_name();
          if (s1 !== peg$FAILED) {
            s2 = [];
            s3 = peg$parsews();
            while (s3 !== peg$FAILED) {
              s2.push(s3);
              s3 = peg$parsews();
            }
            if (s2 !== peg$FAILED) {
              s3 = peg$parseequals();
              if (s3 !== peg$FAILED) {
                s4 = [];
                s5 = peg$parsews();
                while (s5 !== peg$FAILED) {
                  s4.push(s5);
                  s5 = peg$parsews();
                }
                if (s4 !== peg$FAILED) {
                  s5 = peg$parsetornado_reference();
                  if (s5 === peg$FAILED) {
                    s5 = peg$parseno_quote_attr_text();
                  }
                  if (s5 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c12(s1, s5);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c2;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c2;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c2;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c2;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c2;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseattribute_name();
            if (s1 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c13(s1);
            }
            s0 = s1;
          }
        }
      }

      return s0;
    }

    function peg$parseattributes() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$currPos;
      s3 = [];
      s4 = peg$parsews();
      if (s4 !== peg$FAILED) {
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parsews();
        }
      } else {
        s3 = peg$c2;
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parseattribute();
        if (s4 !== peg$FAILED) {
          peg$reportedPos = s2;
          s3 = peg$c14(s4);
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$c2;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$c2;
      }
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$currPos;
        s3 = [];
        s4 = peg$parsews();
        if (s4 !== peg$FAILED) {
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$parsews();
          }
        } else {
          s3 = peg$c2;
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parseattribute();
          if (s4 !== peg$FAILED) {
            peg$reportedPos = s2;
            s3 = peg$c14(s4);
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$c2;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$c2;
        }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c15(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseattribute_name() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$currPos;
      s3 = peg$currPos;
      peg$silentFails++;
      s4 = peg$parsews();
      peg$silentFails--;
      if (s4 === peg$FAILED) {
        s3 = peg$c16;
      } else {
        peg$currPos = s3;
        s3 = peg$c2;
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$currPos;
        peg$silentFails++;
        s5 = peg$parsequote();
        peg$silentFails--;
        if (s5 === peg$FAILED) {
          s4 = peg$c16;
        } else {
          peg$currPos = s4;
          s4 = peg$c2;
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$currPos;
          peg$silentFails++;
          s6 = peg$parsesingle_quote();
          peg$silentFails--;
          if (s6 === peg$FAILED) {
            s5 = peg$c16;
          } else {
            peg$currPos = s5;
            s5 = peg$c2;
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$currPos;
            peg$silentFails++;
            s7 = peg$parserangle();
            peg$silentFails--;
            if (s7 === peg$FAILED) {
              s6 = peg$c16;
            } else {
              peg$currPos = s6;
              s6 = peg$c2;
            }
            if (s6 !== peg$FAILED) {
              s7 = peg$currPos;
              peg$silentFails++;
              s8 = peg$parseequals();
              peg$silentFails--;
              if (s8 === peg$FAILED) {
                s7 = peg$c16;
              } else {
                peg$currPos = s7;
                s7 = peg$c2;
              }
              if (s7 !== peg$FAILED) {
                if (peg$c17.test(input.charAt(peg$currPos))) {
                  s8 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s8 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c18); }
                }
                if (s8 !== peg$FAILED) {
                  peg$reportedPos = s2;
                  s3 = peg$c19(s8);
                  s2 = s3;
                } else {
                  peg$currPos = s2;
                  s2 = peg$c2;
                }
              } else {
                peg$currPos = s2;
                s2 = peg$c2;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$c2;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$c2;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$c2;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$c2;
      }
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          s2 = peg$currPos;
          s3 = peg$currPos;
          peg$silentFails++;
          s4 = peg$parsews();
          peg$silentFails--;
          if (s4 === peg$FAILED) {
            s3 = peg$c16;
          } else {
            peg$currPos = s3;
            s3 = peg$c2;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$currPos;
            peg$silentFails++;
            s5 = peg$parsequote();
            peg$silentFails--;
            if (s5 === peg$FAILED) {
              s4 = peg$c16;
            } else {
              peg$currPos = s4;
              s4 = peg$c2;
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$currPos;
              peg$silentFails++;
              s6 = peg$parsesingle_quote();
              peg$silentFails--;
              if (s6 === peg$FAILED) {
                s5 = peg$c16;
              } else {
                peg$currPos = s5;
                s5 = peg$c2;
              }
              if (s5 !== peg$FAILED) {
                s6 = peg$currPos;
                peg$silentFails++;
                s7 = peg$parserangle();
                peg$silentFails--;
                if (s7 === peg$FAILED) {
                  s6 = peg$c16;
                } else {
                  peg$currPos = s6;
                  s6 = peg$c2;
                }
                if (s6 !== peg$FAILED) {
                  s7 = peg$currPos;
                  peg$silentFails++;
                  s8 = peg$parseequals();
                  peg$silentFails--;
                  if (s8 === peg$FAILED) {
                    s7 = peg$c16;
                  } else {
                    peg$currPos = s7;
                    s7 = peg$c2;
                  }
                  if (s7 !== peg$FAILED) {
                    if (peg$c17.test(input.charAt(peg$currPos))) {
                      s8 = input.charAt(peg$currPos);
                      peg$currPos++;
                    } else {
                      s8 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c18); }
                    }
                    if (s8 !== peg$FAILED) {
                      peg$reportedPos = s2;
                      s3 = peg$c19(s8);
                      s2 = s3;
                    } else {
                      peg$currPos = s2;
                      s2 = peg$c2;
                    }
                  } else {
                    peg$currPos = s2;
                    s2 = peg$c2;
                  }
                } else {
                  peg$currPos = s2;
                  s2 = peg$c2;
                }
              } else {
                peg$currPos = s2;
                s2 = peg$c2;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$c2;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$c2;
          }
        }
      } else {
        s1 = peg$c2;
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c20(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsecomment() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4) === peg$c21) {
        s1 = peg$c21;
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c22); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$currPos;
        peg$silentFails++;
        if (input.substr(peg$currPos, 3) === peg$c23) {
          s5 = peg$c23;
          peg$currPos += 3;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c24); }
        }
        peg$silentFails--;
        if (s5 === peg$FAILED) {
          s4 = peg$c16;
        } else {
          peg$currPos = s4;
          s4 = peg$c2;
        }
        if (s4 !== peg$FAILED) {
          if (input.length > peg$currPos) {
            s5 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c25); }
          }
          if (s5 !== peg$FAILED) {
            peg$reportedPos = s3;
            s4 = peg$c26(s5);
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$c2;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c2;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$currPos;
          peg$silentFails++;
          if (input.substr(peg$currPos, 3) === peg$c23) {
            s5 = peg$c23;
            peg$currPos += 3;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c24); }
          }
          peg$silentFails--;
          if (s5 === peg$FAILED) {
            s4 = peg$c16;
          } else {
            peg$currPos = s4;
            s4 = peg$c2;
          }
          if (s4 !== peg$FAILED) {
            if (input.length > peg$currPos) {
              s5 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c25); }
            }
            if (s5 !== peg$FAILED) {
              peg$reportedPos = s3;
              s4 = peg$c26(s5);
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c2;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c2;
          }
        }
        if (s2 !== peg$FAILED) {
          if (input.substr(peg$currPos, 3) === peg$c23) {
            s3 = peg$c23;
            peg$currPos += 3;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c24); }
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c27(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c2;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c2;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c2;
      }

      return s0;
    }

    function peg$parsetornado_comment() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$parselbrace();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 33) {
          s2 = peg$c28;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c29); }
        }
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$currPos;
          s5 = peg$currPos;
          peg$silentFails++;
          if (input.substr(peg$currPos, 2) === peg$c30) {
            s6 = peg$c30;
            peg$currPos += 2;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c31); }
          }
          peg$silentFails--;
          if (s6 === peg$FAILED) {
            s5 = peg$c16;
          } else {
            peg$currPos = s5;
            s5 = peg$c2;
          }
          if (s5 !== peg$FAILED) {
            if (input.length > peg$currPos) {
              s6 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s6 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c25); }
            }
            if (s6 !== peg$FAILED) {
              peg$reportedPos = s4;
              s5 = peg$c26(s6);
              s4 = s5;
            } else {
              peg$currPos = s4;
              s4 = peg$c2;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$c2;
          }
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$currPos;
            s5 = peg$currPos;
            peg$silentFails++;
            if (input.substr(peg$currPos, 2) === peg$c30) {
              s6 = peg$c30;
              peg$currPos += 2;
            } else {
              s6 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c31); }
            }
            peg$silentFails--;
            if (s6 === peg$FAILED) {
              s5 = peg$c16;
            } else {
              peg$currPos = s5;
              s5 = peg$c2;
            }
            if (s5 !== peg$FAILED) {
              if (input.length > peg$currPos) {
                s6 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c25); }
              }
              if (s6 !== peg$FAILED) {
                peg$reportedPos = s4;
                s5 = peg$c26(s6);
                s4 = s5;
              } else {
                peg$currPos = s4;
                s4 = peg$c2;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$c2;
            }
          }
          if (s3 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 33) {
              s4 = peg$c28;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c29); }
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parserbrace();
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c32(s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c2;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c2;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c2;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c2;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c2;
      }

      return s0;
    }

    function peg$parsetornado_body() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parsetornado_body_tag_start();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parsews();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsews();
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parserbrace();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsenodes();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsetornado_bodies();
              if (s5 !== peg$FAILED) {
                s6 = peg$parsetornado_body_tag_end();
                if (s6 !== peg$FAILED) {
                  peg$reportedPos = peg$currPos;
                  s7 = peg$c33(s1, s4, s5, s6);
                  if (s7) {
                    s7 = peg$c16;
                  } else {
                    s7 = peg$c2;
                  }
                  if (s7 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c34(s1, s4, s5, s6);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c2;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c2;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c2;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c2;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c2;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c2;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c2;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parsetornado_body_tag_start();
        if (s1 !== peg$FAILED) {
          s2 = [];
          s3 = peg$parsews();
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parsews();
          }
          if (s2 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 47) {
              s3 = peg$c6;
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c7); }
            }
            if (s3 !== peg$FAILED) {
              s4 = peg$parserbrace();
              if (s4 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c35(s1);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c2;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c2;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c2;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c2;
        }
      }

      return s0;
    }

    function peg$parsetornado_bodies() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$currPos;
      s3 = peg$parselbrace();
      if (s3 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 58) {
          s4 = peg$c36;
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c37); }
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parsekey();
          if (s5 !== peg$FAILED) {
            s6 = peg$parserbrace();
            if (s6 !== peg$FAILED) {
              s7 = peg$parsenodes();
              if (s7 !== peg$FAILED) {
                peg$reportedPos = s2;
                s3 = peg$c38(s5, s7);
                s2 = s3;
              } else {
                peg$currPos = s2;
                s2 = peg$c2;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$c2;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$c2;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$c2;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$c2;
      }
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$currPos;
        s3 = peg$parselbrace();
        if (s3 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 58) {
            s4 = peg$c36;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c37); }
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parsekey();
            if (s5 !== peg$FAILED) {
              s6 = peg$parserbrace();
              if (s6 !== peg$FAILED) {
                s7 = peg$parsenodes();
                if (s7 !== peg$FAILED) {
                  peg$reportedPos = s2;
                  s3 = peg$c38(s5, s7);
                  s2 = s3;
                } else {
                  peg$currPos = s2;
                  s2 = peg$c2;
                }
              } else {
                peg$currPos = s2;
                s2 = peg$c2;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$c2;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$c2;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$c2;
        }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c39(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsetornado_body_type() {
      var s0;

      if (peg$c40.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c41); }
      }

      return s0;
    }

    function peg$parsetornado_body_tag_start() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parselbrace();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsetornado_body_type();
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$parsews();
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$parsews();
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsetornado_key();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsetornado_params();
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c42(s2, s4, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c2;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c2;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c2;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c2;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c2;
      }

      return s0;
    }

    function peg$parsetornado_body_tag_end() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parselbraceslash();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsetornado_key();
        if (s2 !== peg$FAILED) {
          s3 = peg$parserbrace();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c43(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c2;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c2;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c2;
      }

      return s0;
    }

    function peg$parsetornado_reference() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parselbrace();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsetornado_key();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsetornado_params();
          if (s3 !== peg$FAILED) {
            s4 = peg$parserbrace();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c44(s2, s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c2;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c2;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c2;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c2;
      }

      return s0;
    }

    function peg$parsetornado_partial() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parselbrace();
      if (s1 !== peg$FAILED) {
        s2 = peg$parserangle();
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$parsews();
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$parsews();
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsetornado_key();
            if (s4 === peg$FAILED) {
              s4 = peg$parsestring();
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parsetornado_params();
              if (s5 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 47) {
                  s6 = peg$c6;
                  peg$currPos++;
                } else {
                  s6 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c7); }
                }
                if (s6 !== peg$FAILED) {
                  s7 = peg$parserbrace();
                  if (s7 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c45(s4, s5);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c2;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c2;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c2;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c2;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c2;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c2;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c2;
      }

      return s0;
    }

    function peg$parsetornado_key() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (peg$c46.test(input.charAt(peg$currPos))) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c47); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        if (peg$c48.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c49); }
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          if (peg$c48.test(input.charAt(peg$currPos))) {
            s3 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c49); }
          }
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c50(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c2;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c2;
      }

      return s0;
    }

    function peg$parsetornado_array_part() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 46) {
        s3 = peg$c51;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c52); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parsetornado_key();
        if (s4 !== peg$FAILED) {
          peg$reportedPos = s2;
          s3 = peg$c53(s4);
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$c2;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$c2;
      }
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          s2 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 46) {
            s3 = peg$c51;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c52); }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsetornado_key();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s2;
              s3 = peg$c53(s4);
              s2 = s3;
            } else {
              peg$currPos = s2;
              s2 = peg$c2;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$c2;
          }
        }
      } else {
        s1 = peg$c2;
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c54(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsetornado_filters() {
      var s0, s1, s2, s3;

      s0 = [];
      s1 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 124) {
        s2 = peg$c55;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c56); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parsekey();
        if (s3 !== peg$FAILED) {
          peg$reportedPos = s1;
          s2 = peg$c57(s3);
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$c2;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$c2;
      }
      while (s1 !== peg$FAILED) {
        s0.push(s1);
        s1 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 124) {
          s2 = peg$c55;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c56); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsekey();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s1;
            s2 = peg$c57(s3);
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$c2;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$c2;
        }
      }

      return s0;
    }

    function peg$parsetornado_params() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$currPos;
      s3 = [];
      s4 = peg$parsews();
      if (s4 !== peg$FAILED) {
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parsews();
        }
      } else {
        s3 = peg$c2;
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parsetornado_param();
        if (s4 !== peg$FAILED) {
          peg$reportedPos = s2;
          s3 = peg$c58(s4);
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$c2;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$c2;
      }
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$currPos;
        s3 = [];
        s4 = peg$parsews();
        if (s4 !== peg$FAILED) {
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$parsews();
          }
        } else {
          s3 = peg$c2;
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parsetornado_param();
          if (s4 !== peg$FAILED) {
            peg$reportedPos = s2;
            s3 = peg$c58(s4);
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$c2;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$c2;
        }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c59(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsetornado_param() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsekey();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseequals();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsenumber();
          if (s3 === peg$FAILED) {
            s3 = peg$parsestring();
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c60(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c2;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c2;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c2;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parsekey();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseequals();
          if (s2 !== peg$FAILED) {
            s3 = peg$parsetornado_key();
            if (s3 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c61(s1, s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c2;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c2;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c2;
        }
      }

      return s0;
    }

    function peg$parsetornado_tag() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      s0 = peg$currPos;
      s1 = peg$parselbrace();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parsews();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsews();
        }
        if (s2 !== peg$FAILED) {
          if (peg$c62.test(input.charAt(peg$currPos))) {
            s3 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c63); }
          }
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$currPos;
            s6 = peg$currPos;
            peg$silentFails++;
            s7 = peg$parserbrace();
            peg$silentFails--;
            if (s7 === peg$FAILED) {
              s6 = peg$c16;
            } else {
              peg$currPos = s6;
              s6 = peg$c2;
            }
            if (s6 !== peg$FAILED) {
              s7 = peg$currPos;
              peg$silentFails++;
              s8 = peg$parseeol();
              peg$silentFails--;
              if (s8 === peg$FAILED) {
                s7 = peg$c16;
              } else {
                peg$currPos = s7;
                s7 = peg$c2;
              }
              if (s7 !== peg$FAILED) {
                if (input.length > peg$currPos) {
                  s8 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s8 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c25); }
                }
                if (s8 !== peg$FAILED) {
                  s6 = [s6, s7, s8];
                  s5 = s6;
                } else {
                  peg$currPos = s5;
                  s5 = peg$c2;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$c2;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$c2;
            }
            if (s5 !== peg$FAILED) {
              while (s5 !== peg$FAILED) {
                s4.push(s5);
                s5 = peg$currPos;
                s6 = peg$currPos;
                peg$silentFails++;
                s7 = peg$parserbrace();
                peg$silentFails--;
                if (s7 === peg$FAILED) {
                  s6 = peg$c16;
                } else {
                  peg$currPos = s6;
                  s6 = peg$c2;
                }
                if (s6 !== peg$FAILED) {
                  s7 = peg$currPos;
                  peg$silentFails++;
                  s8 = peg$parseeol();
                  peg$silentFails--;
                  if (s8 === peg$FAILED) {
                    s7 = peg$c16;
                  } else {
                    peg$currPos = s7;
                    s7 = peg$c2;
                  }
                  if (s7 !== peg$FAILED) {
                    if (input.length > peg$currPos) {
                      s8 = input.charAt(peg$currPos);
                      peg$currPos++;
                    } else {
                      s8 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c25); }
                    }
                    if (s8 !== peg$FAILED) {
                      s6 = [s6, s7, s8];
                      s5 = s6;
                    } else {
                      peg$currPos = s5;
                      s5 = peg$c2;
                    }
                  } else {
                    peg$currPos = s5;
                    s5 = peg$c2;
                  }
                } else {
                  peg$currPos = s5;
                  s5 = peg$c2;
                }
              }
            } else {
              s4 = peg$c2;
            }
            if (s4 !== peg$FAILED) {
              s5 = [];
              s6 = peg$parsews();
              while (s6 !== peg$FAILED) {
                s5.push(s6);
                s6 = peg$parsews();
              }
              if (s5 !== peg$FAILED) {
                s6 = peg$parserbrace();
                if (s6 !== peg$FAILED) {
                  s1 = [s1, s2, s3, s4, s5, s6];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c2;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c2;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c2;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c2;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c2;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c2;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$parsetornado_reference();
      }

      return s0;
    }

    function peg$parsestring() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsequote();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parsenon_quote();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsenon_quote();
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsequote();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c64(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c2;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c2;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c2;
      }

      return s0;
    }

    function peg$parsenumber() {
      var s0, s1;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$parsefloat();
      if (s1 === peg$FAILED) {
        s1 = peg$parseinteger();
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c66(s1);
      }
      s0 = s1;
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c65); }
      }

      return s0;
    }

    function peg$parsefloat() {
      var s0, s1, s2, s3, s4;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$parseinteger();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 46) {
          s2 = peg$c51;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c52); }
        }
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$parseinteger();
          if (s4 !== peg$FAILED) {
            while (s4 !== peg$FAILED) {
              s3.push(s4);
              s4 = peg$parseinteger();
            }
          } else {
            s3 = peg$c2;
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c68(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c2;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c2;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c2;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c67); }
      }

      return s0;
    }

    function peg$parseinteger() {
      var s0, s1, s2, s3;

      peg$silentFails++;
      s0 = peg$currPos;
      if (peg$c71.test(input.charAt(peg$currPos))) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c72); }
      }
      if (s1 === peg$FAILED) {
        s1 = peg$c70;
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        if (peg$c73.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c74); }
        }
        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            if (peg$c73.test(input.charAt(peg$currPos))) {
              s3 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c74); }
            }
          }
        } else {
          s2 = peg$c2;
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c75(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c2;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c2;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c69); }
      }

      return s0;
    }

    function peg$parseplain_text() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$currPos;
      s3 = peg$currPos;
      peg$silentFails++;
      s4 = peg$parsecomment();
      peg$silentFails--;
      if (s4 === peg$FAILED) {
        s3 = peg$c16;
      } else {
        peg$currPos = s3;
        s3 = peg$c2;
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$currPos;
        peg$silentFails++;
        s5 = peg$parsetornado_comment();
        peg$silentFails--;
        if (s5 === peg$FAILED) {
          s4 = peg$c16;
        } else {
          peg$currPos = s4;
          s4 = peg$c2;
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$currPos;
          peg$silentFails++;
          s6 = peg$parsestart_tag();
          peg$silentFails--;
          if (s6 === peg$FAILED) {
            s5 = peg$c16;
          } else {
            peg$currPos = s5;
            s5 = peg$c2;
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$currPos;
            peg$silentFails++;
            s7 = peg$parseend_tag();
            peg$silentFails--;
            if (s7 === peg$FAILED) {
              s6 = peg$c16;
            } else {
              peg$currPos = s6;
              s6 = peg$c2;
            }
            if (s6 !== peg$FAILED) {
              s7 = peg$currPos;
              peg$silentFails++;
              s8 = peg$parseself_closing_tag();
              peg$silentFails--;
              if (s8 === peg$FAILED) {
                s7 = peg$c16;
              } else {
                peg$currPos = s7;
                s7 = peg$c2;
              }
              if (s7 !== peg$FAILED) {
                s8 = peg$currPos;
                peg$silentFails++;
                s9 = peg$parsehtml_entity();
                peg$silentFails--;
                if (s9 === peg$FAILED) {
                  s8 = peg$c16;
                } else {
                  peg$currPos = s8;
                  s8 = peg$c2;
                }
                if (s8 !== peg$FAILED) {
                  s9 = peg$currPos;
                  peg$silentFails++;
                  s10 = peg$parsetornado_tag();
                  peg$silentFails--;
                  if (s10 === peg$FAILED) {
                    s9 = peg$c16;
                  } else {
                    peg$currPos = s9;
                    s9 = peg$c2;
                  }
                  if (s9 !== peg$FAILED) {
                    if (input.length > peg$currPos) {
                      s10 = input.charAt(peg$currPos);
                      peg$currPos++;
                    } else {
                      s10 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c25); }
                    }
                    if (s10 !== peg$FAILED) {
                      peg$reportedPos = s2;
                      s3 = peg$c26(s10);
                      s2 = s3;
                    } else {
                      peg$currPos = s2;
                      s2 = peg$c2;
                    }
                  } else {
                    peg$currPos = s2;
                    s2 = peg$c2;
                  }
                } else {
                  peg$currPos = s2;
                  s2 = peg$c2;
                }
              } else {
                peg$currPos = s2;
                s2 = peg$c2;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$c2;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$c2;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$c2;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$c2;
      }
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          s2 = peg$currPos;
          s3 = peg$currPos;
          peg$silentFails++;
          s4 = peg$parsecomment();
          peg$silentFails--;
          if (s4 === peg$FAILED) {
            s3 = peg$c16;
          } else {
            peg$currPos = s3;
            s3 = peg$c2;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$currPos;
            peg$silentFails++;
            s5 = peg$parsetornado_comment();
            peg$silentFails--;
            if (s5 === peg$FAILED) {
              s4 = peg$c16;
            } else {
              peg$currPos = s4;
              s4 = peg$c2;
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$currPos;
              peg$silentFails++;
              s6 = peg$parsestart_tag();
              peg$silentFails--;
              if (s6 === peg$FAILED) {
                s5 = peg$c16;
              } else {
                peg$currPos = s5;
                s5 = peg$c2;
              }
              if (s5 !== peg$FAILED) {
                s6 = peg$currPos;
                peg$silentFails++;
                s7 = peg$parseend_tag();
                peg$silentFails--;
                if (s7 === peg$FAILED) {
                  s6 = peg$c16;
                } else {
                  peg$currPos = s6;
                  s6 = peg$c2;
                }
                if (s6 !== peg$FAILED) {
                  s7 = peg$currPos;
                  peg$silentFails++;
                  s8 = peg$parseself_closing_tag();
                  peg$silentFails--;
                  if (s8 === peg$FAILED) {
                    s7 = peg$c16;
                  } else {
                    peg$currPos = s7;
                    s7 = peg$c2;
                  }
                  if (s7 !== peg$FAILED) {
                    s8 = peg$currPos;
                    peg$silentFails++;
                    s9 = peg$parsehtml_entity();
                    peg$silentFails--;
                    if (s9 === peg$FAILED) {
                      s8 = peg$c16;
                    } else {
                      peg$currPos = s8;
                      s8 = peg$c2;
                    }
                    if (s8 !== peg$FAILED) {
                      s9 = peg$currPos;
                      peg$silentFails++;
                      s10 = peg$parsetornado_tag();
                      peg$silentFails--;
                      if (s10 === peg$FAILED) {
                        s9 = peg$c16;
                      } else {
                        peg$currPos = s9;
                        s9 = peg$c2;
                      }
                      if (s9 !== peg$FAILED) {
                        if (input.length > peg$currPos) {
                          s10 = input.charAt(peg$currPos);
                          peg$currPos++;
                        } else {
                          s10 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c25); }
                        }
                        if (s10 !== peg$FAILED) {
                          peg$reportedPos = s2;
                          s3 = peg$c26(s10);
                          s2 = s3;
                        } else {
                          peg$currPos = s2;
                          s2 = peg$c2;
                        }
                      } else {
                        peg$currPos = s2;
                        s2 = peg$c2;
                      }
                    } else {
                      peg$currPos = s2;
                      s2 = peg$c2;
                    }
                  } else {
                    peg$currPos = s2;
                    s2 = peg$c2;
                  }
                } else {
                  peg$currPos = s2;
                  s2 = peg$c2;
                }
              } else {
                peg$currPos = s2;
                s2 = peg$c2;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$c2;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$c2;
          }
        }
      } else {
        s1 = peg$c2;
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c76(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsehtml_entity() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$parseampersand();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseentity_chars();
        if (s3 !== peg$FAILED) {
          s4 = peg$parsesemicolon();
          if (s4 !== peg$FAILED) {
            s2 = [s2, s3, s4];
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$c2;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$c2;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$c2;
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c77(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseentity_chars() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = [];
      if (peg$c78.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c79); }
      }
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          if (peg$c78.test(input.charAt(peg$currPos))) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c79); }
          }
        }
      } else {
        s1 = peg$c2;
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c80(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseattr_text() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$currPos;
      s3 = peg$currPos;
      peg$silentFails++;
      s4 = peg$parsetornado_comment();
      peg$silentFails--;
      if (s4 === peg$FAILED) {
        s3 = peg$c16;
      } else {
        peg$currPos = s3;
        s3 = peg$c2;
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$currPos;
        peg$silentFails++;
        s5 = peg$parsetornado_body();
        peg$silentFails--;
        if (s5 === peg$FAILED) {
          s4 = peg$c16;
        } else {
          peg$currPos = s4;
          s4 = peg$c2;
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$currPos;
          peg$silentFails++;
          s6 = peg$parsetornado_reference();
          peg$silentFails--;
          if (s6 === peg$FAILED) {
            s5 = peg$c16;
          } else {
            peg$currPos = s5;
            s5 = peg$c2;
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$currPos;
            peg$silentFails++;
            s7 = peg$parsetornado_partial();
            peg$silentFails--;
            if (s7 === peg$FAILED) {
              s6 = peg$c16;
            } else {
              peg$currPos = s6;
              s6 = peg$c2;
            }
            if (s6 !== peg$FAILED) {
              s7 = peg$currPos;
              peg$silentFails++;
              s8 = peg$parsehtml_entity();
              peg$silentFails--;
              if (s8 === peg$FAILED) {
                s7 = peg$c16;
              } else {
                peg$currPos = s7;
                s7 = peg$c2;
              }
              if (s7 !== peg$FAILED) {
                s8 = peg$currPos;
                peg$silentFails++;
                s9 = peg$parsequote();
                peg$silentFails--;
                if (s9 === peg$FAILED) {
                  s8 = peg$c16;
                } else {
                  peg$currPos = s8;
                  s8 = peg$c2;
                }
                if (s8 !== peg$FAILED) {
                  if (input.length > peg$currPos) {
                    s9 = input.charAt(peg$currPos);
                    peg$currPos++;
                  } else {
                    s9 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c25); }
                  }
                  if (s9 !== peg$FAILED) {
                    peg$reportedPos = s2;
                    s3 = peg$c26(s9);
                    s2 = s3;
                  } else {
                    peg$currPos = s2;
                    s2 = peg$c2;
                  }
                } else {
                  peg$currPos = s2;
                  s2 = peg$c2;
                }
              } else {
                peg$currPos = s2;
                s2 = peg$c2;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$c2;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$c2;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$c2;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$c2;
      }
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          s2 = peg$currPos;
          s3 = peg$currPos;
          peg$silentFails++;
          s4 = peg$parsetornado_comment();
          peg$silentFails--;
          if (s4 === peg$FAILED) {
            s3 = peg$c16;
          } else {
            peg$currPos = s3;
            s3 = peg$c2;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$currPos;
            peg$silentFails++;
            s5 = peg$parsetornado_body();
            peg$silentFails--;
            if (s5 === peg$FAILED) {
              s4 = peg$c16;
            } else {
              peg$currPos = s4;
              s4 = peg$c2;
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$currPos;
              peg$silentFails++;
              s6 = peg$parsetornado_reference();
              peg$silentFails--;
              if (s6 === peg$FAILED) {
                s5 = peg$c16;
              } else {
                peg$currPos = s5;
                s5 = peg$c2;
              }
              if (s5 !== peg$FAILED) {
                s6 = peg$currPos;
                peg$silentFails++;
                s7 = peg$parsetornado_partial();
                peg$silentFails--;
                if (s7 === peg$FAILED) {
                  s6 = peg$c16;
                } else {
                  peg$currPos = s6;
                  s6 = peg$c2;
                }
                if (s6 !== peg$FAILED) {
                  s7 = peg$currPos;
                  peg$silentFails++;
                  s8 = peg$parsehtml_entity();
                  peg$silentFails--;
                  if (s8 === peg$FAILED) {
                    s7 = peg$c16;
                  } else {
                    peg$currPos = s7;
                    s7 = peg$c2;
                  }
                  if (s7 !== peg$FAILED) {
                    s8 = peg$currPos;
                    peg$silentFails++;
                    s9 = peg$parsequote();
                    peg$silentFails--;
                    if (s9 === peg$FAILED) {
                      s8 = peg$c16;
                    } else {
                      peg$currPos = s8;
                      s8 = peg$c2;
                    }
                    if (s8 !== peg$FAILED) {
                      if (input.length > peg$currPos) {
                        s9 = input.charAt(peg$currPos);
                        peg$currPos++;
                      } else {
                        s9 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c25); }
                      }
                      if (s9 !== peg$FAILED) {
                        peg$reportedPos = s2;
                        s3 = peg$c26(s9);
                        s2 = s3;
                      } else {
                        peg$currPos = s2;
                        s2 = peg$c2;
                      }
                    } else {
                      peg$currPos = s2;
                      s2 = peg$c2;
                    }
                  } else {
                    peg$currPos = s2;
                    s2 = peg$c2;
                  }
                } else {
                  peg$currPos = s2;
                  s2 = peg$c2;
                }
              } else {
                peg$currPos = s2;
                s2 = peg$c2;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$c2;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$c2;
          }
        }
      } else {
        s1 = peg$c2;
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c81(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsesingle_quote_attr_text() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$currPos;
      s3 = peg$currPos;
      peg$silentFails++;
      s4 = peg$parsetornado_comment();
      peg$silentFails--;
      if (s4 === peg$FAILED) {
        s3 = peg$c16;
      } else {
        peg$currPos = s3;
        s3 = peg$c2;
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$currPos;
        peg$silentFails++;
        s5 = peg$parsetornado_body();
        peg$silentFails--;
        if (s5 === peg$FAILED) {
          s4 = peg$c16;
        } else {
          peg$currPos = s4;
          s4 = peg$c2;
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$currPos;
          peg$silentFails++;
          s6 = peg$parsetornado_reference();
          peg$silentFails--;
          if (s6 === peg$FAILED) {
            s5 = peg$c16;
          } else {
            peg$currPos = s5;
            s5 = peg$c2;
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$currPos;
            peg$silentFails++;
            s7 = peg$parsetornado_partial();
            peg$silentFails--;
            if (s7 === peg$FAILED) {
              s6 = peg$c16;
            } else {
              peg$currPos = s6;
              s6 = peg$c2;
            }
            if (s6 !== peg$FAILED) {
              s7 = peg$currPos;
              peg$silentFails++;
              s8 = peg$parsehtml_entity();
              peg$silentFails--;
              if (s8 === peg$FAILED) {
                s7 = peg$c16;
              } else {
                peg$currPos = s7;
                s7 = peg$c2;
              }
              if (s7 !== peg$FAILED) {
                s8 = peg$currPos;
                peg$silentFails++;
                s9 = peg$parsesingle_quote();
                peg$silentFails--;
                if (s9 === peg$FAILED) {
                  s8 = peg$c16;
                } else {
                  peg$currPos = s8;
                  s8 = peg$c2;
                }
                if (s8 !== peg$FAILED) {
                  if (input.length > peg$currPos) {
                    s9 = input.charAt(peg$currPos);
                    peg$currPos++;
                  } else {
                    s9 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c25); }
                  }
                  if (s9 !== peg$FAILED) {
                    peg$reportedPos = s2;
                    s3 = peg$c26(s9);
                    s2 = s3;
                  } else {
                    peg$currPos = s2;
                    s2 = peg$c2;
                  }
                } else {
                  peg$currPos = s2;
                  s2 = peg$c2;
                }
              } else {
                peg$currPos = s2;
                s2 = peg$c2;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$c2;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$c2;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$c2;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$c2;
      }
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          s2 = peg$currPos;
          s3 = peg$currPos;
          peg$silentFails++;
          s4 = peg$parsetornado_comment();
          peg$silentFails--;
          if (s4 === peg$FAILED) {
            s3 = peg$c16;
          } else {
            peg$currPos = s3;
            s3 = peg$c2;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$currPos;
            peg$silentFails++;
            s5 = peg$parsetornado_body();
            peg$silentFails--;
            if (s5 === peg$FAILED) {
              s4 = peg$c16;
            } else {
              peg$currPos = s4;
              s4 = peg$c2;
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$currPos;
              peg$silentFails++;
              s6 = peg$parsetornado_reference();
              peg$silentFails--;
              if (s6 === peg$FAILED) {
                s5 = peg$c16;
              } else {
                peg$currPos = s5;
                s5 = peg$c2;
              }
              if (s5 !== peg$FAILED) {
                s6 = peg$currPos;
                peg$silentFails++;
                s7 = peg$parsetornado_partial();
                peg$silentFails--;
                if (s7 === peg$FAILED) {
                  s6 = peg$c16;
                } else {
                  peg$currPos = s6;
                  s6 = peg$c2;
                }
                if (s6 !== peg$FAILED) {
                  s7 = peg$currPos;
                  peg$silentFails++;
                  s8 = peg$parsehtml_entity();
                  peg$silentFails--;
                  if (s8 === peg$FAILED) {
                    s7 = peg$c16;
                  } else {
                    peg$currPos = s7;
                    s7 = peg$c2;
                  }
                  if (s7 !== peg$FAILED) {
                    s8 = peg$currPos;
                    peg$silentFails++;
                    s9 = peg$parsesingle_quote();
                    peg$silentFails--;
                    if (s9 === peg$FAILED) {
                      s8 = peg$c16;
                    } else {
                      peg$currPos = s8;
                      s8 = peg$c2;
                    }
                    if (s8 !== peg$FAILED) {
                      if (input.length > peg$currPos) {
                        s9 = input.charAt(peg$currPos);
                        peg$currPos++;
                      } else {
                        s9 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c25); }
                      }
                      if (s9 !== peg$FAILED) {
                        peg$reportedPos = s2;
                        s3 = peg$c26(s9);
                        s2 = s3;
                      } else {
                        peg$currPos = s2;
                        s2 = peg$c2;
                      }
                    } else {
                      peg$currPos = s2;
                      s2 = peg$c2;
                    }
                  } else {
                    peg$currPos = s2;
                    s2 = peg$c2;
                  }
                } else {
                  peg$currPos = s2;
                  s2 = peg$c2;
                }
              } else {
                peg$currPos = s2;
                s2 = peg$c2;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$c2;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$c2;
          }
        }
      } else {
        s1 = peg$c2;
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c81(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseno_quote_attr_text() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$currPos;
      s3 = peg$currPos;
      peg$silentFails++;
      s4 = peg$parsequote();
      peg$silentFails--;
      if (s4 === peg$FAILED) {
        s3 = peg$c16;
      } else {
        peg$currPos = s3;
        s3 = peg$c2;
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$currPos;
        peg$silentFails++;
        s5 = peg$parsesingle_quote();
        peg$silentFails--;
        if (s5 === peg$FAILED) {
          s4 = peg$c16;
        } else {
          peg$currPos = s4;
          s4 = peg$c2;
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$currPos;
          peg$silentFails++;
          s6 = peg$parseequals();
          peg$silentFails--;
          if (s6 === peg$FAILED) {
            s5 = peg$c16;
          } else {
            peg$currPos = s5;
            s5 = peg$c2;
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$currPos;
            peg$silentFails++;
            s7 = peg$parselangle();
            peg$silentFails--;
            if (s7 === peg$FAILED) {
              s6 = peg$c16;
            } else {
              peg$currPos = s6;
              s6 = peg$c2;
            }
            if (s6 !== peg$FAILED) {
              s7 = peg$currPos;
              peg$silentFails++;
              s8 = peg$parserangle();
              peg$silentFails--;
              if (s8 === peg$FAILED) {
                s7 = peg$c16;
              } else {
                peg$currPos = s7;
                s7 = peg$c2;
              }
              if (s7 !== peg$FAILED) {
                if (peg$c82.test(input.charAt(peg$currPos))) {
                  s8 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s8 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c83); }
                }
                if (s8 !== peg$FAILED) {
                  peg$reportedPos = s2;
                  s3 = peg$c19(s8);
                  s2 = s3;
                } else {
                  peg$currPos = s2;
                  s2 = peg$c2;
                }
              } else {
                peg$currPos = s2;
                s2 = peg$c2;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$c2;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$c2;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$c2;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$c2;
      }
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          s2 = peg$currPos;
          s3 = peg$currPos;
          peg$silentFails++;
          s4 = peg$parsequote();
          peg$silentFails--;
          if (s4 === peg$FAILED) {
            s3 = peg$c16;
          } else {
            peg$currPos = s3;
            s3 = peg$c2;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$currPos;
            peg$silentFails++;
            s5 = peg$parsesingle_quote();
            peg$silentFails--;
            if (s5 === peg$FAILED) {
              s4 = peg$c16;
            } else {
              peg$currPos = s4;
              s4 = peg$c2;
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$currPos;
              peg$silentFails++;
              s6 = peg$parseequals();
              peg$silentFails--;
              if (s6 === peg$FAILED) {
                s5 = peg$c16;
              } else {
                peg$currPos = s5;
                s5 = peg$c2;
              }
              if (s5 !== peg$FAILED) {
                s6 = peg$currPos;
                peg$silentFails++;
                s7 = peg$parselangle();
                peg$silentFails--;
                if (s7 === peg$FAILED) {
                  s6 = peg$c16;
                } else {
                  peg$currPos = s6;
                  s6 = peg$c2;
                }
                if (s6 !== peg$FAILED) {
                  s7 = peg$currPos;
                  peg$silentFails++;
                  s8 = peg$parserangle();
                  peg$silentFails--;
                  if (s8 === peg$FAILED) {
                    s7 = peg$c16;
                  } else {
                    peg$currPos = s7;
                    s7 = peg$c2;
                  }
                  if (s7 !== peg$FAILED) {
                    if (peg$c82.test(input.charAt(peg$currPos))) {
                      s8 = input.charAt(peg$currPos);
                      peg$currPos++;
                    } else {
                      s8 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c83); }
                    }
                    if (s8 !== peg$FAILED) {
                      peg$reportedPos = s2;
                      s3 = peg$c19(s8);
                      s2 = s3;
                    } else {
                      peg$currPos = s2;
                      s2 = peg$c2;
                    }
                  } else {
                    peg$currPos = s2;
                    s2 = peg$c2;
                  }
                } else {
                  peg$currPos = s2;
                  s2 = peg$c2;
                }
              } else {
                peg$currPos = s2;
                s2 = peg$c2;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$c2;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$c2;
          }
        }
      } else {
        s1 = peg$c2;
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c84(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsews() {
      var s0;

      if (peg$c85.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c86); }
      }

      return s0;
    }

    function peg$parselangleslash() {
      var s0;

      if (input.substr(peg$currPos, 2) === peg$c87) {
        s0 = peg$c87;
        peg$currPos += 2;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c88); }
      }

      return s0;
    }

    function peg$parselangle() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 60) {
        s0 = peg$c89;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c90); }
      }

      return s0;
    }

    function peg$parserangle() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 62) {
        s0 = peg$c91;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c92); }
      }

      return s0;
    }

    function peg$parserangleslash() {
      var s0;

      if (input.substr(peg$currPos, 2) === peg$c93) {
        s0 = peg$c93;
        peg$currPos += 2;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c94); }
      }

      return s0;
    }

    function peg$parselbraceslash() {
      var s0;

      if (input.substr(peg$currPos, 2) === peg$c95) {
        s0 = peg$c95;
        peg$currPos += 2;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c96); }
      }

      return s0;
    }

    function peg$parserbraceslash() {
      var s0;

      if (input.substr(peg$currPos, 2) === peg$c97) {
        s0 = peg$c97;
        peg$currPos += 2;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c98); }
      }

      return s0;
    }

    function peg$parselbrace() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 123) {
        s0 = peg$c99;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c100); }
      }

      return s0;
    }

    function peg$parserbrace() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 125) {
        s0 = peg$c101;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c102); }
      }

      return s0;
    }

    function peg$parseequals() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 61) {
        s0 = peg$c103;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c104); }
      }

      return s0;
    }

    function peg$parsequote() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 34) {
        s0 = peg$c105;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c106); }
      }

      return s0;
    }

    function peg$parsesingle_quote() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 39) {
        s0 = peg$c107;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c108); }
      }

      return s0;
    }

    function peg$parseampersand() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 38) {
        s0 = peg$c109;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c110); }
      }

      return s0;
    }

    function peg$parsesemicolon() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 59) {
        s0 = peg$c111;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c112); }
      }

      return s0;
    }

    function peg$parsenon_quote() {
      var s0;

      if (peg$c113.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c114); }
      }

      return s0;
    }

    function peg$parseeol() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 10) {
        s0 = peg$c115;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c116); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c117) {
          s0 = peg$c117;
          peg$currPos += 2;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c118); }
        }
        if (s0 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 13) {
            s0 = peg$c119;
            peg$currPos++;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c120); }
          }
          if (s0 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 8232) {
              s0 = peg$c121;
              peg$currPos++;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c122); }
            }
            if (s0 === peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 8233) {
                s0 = peg$c123;
                peg$currPos++;
              } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c124); }
              }
            }
          }
        }
      }

      return s0;
    }



      var tornadoBodyTypes = {
        '?': 'exists',
        '^': 'notExists',
        '#': 'section',
        '@': 'helper',
        '+': 'block',
        '<': 'inlinePartial',
        '%': 'pragma'
      };


    peg$result = peg$startRuleFunction();

    if (peg$result !== peg$FAILED && peg$currPos === input.length) {
      return peg$result;
    } else {
      if (peg$result !== peg$FAILED && peg$currPos < input.length) {
        peg$fail({ type: "end", description: "end of input" });
      }

      throw peg$buildException(null, peg$maxFailExpected, peg$maxFailPos);
    }
  }

  return {
    SyntaxError: SyntaxError,
    parse:       parse
  };
})();